## no critic: TestingAndDebugging::RequireUseStrict
package CellFunc; # just to make PodWeaver happy

# AUTHORITY
# DATE
# DIST
# VERSION

1;
# ABSTRACT: Function that accepts a single value

=head1 SPECIFICATION VERSION

 1.0


=head1 ABSTRACT

This document specifies "cell functions", a specific kind of Perl functions that
accept a single value and return a transformed value.


=head1 STATUS

Early draft. The 1.0 series does not guarantee full backward compatibility
between revisions, so caveat implementor. However, major incompatibility will
bump the version to 1.1.


=head1 SPECIFICATION

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in RFC 2119.

=over

=item * Function must accept a hash argument C<%args>

This future-proofs the function when more and more arguments are added.

=item * Function must return an enveloped result.

For xample:

 [200, "OK", 42]

=item * Arguments should be described in Rinci metadata

See L<Rinci> and L<Rinci::function> for more details.

=item * There is a required argument: value

It can be specified with schema C<str>, for example, but actually any kind of
schema is allowed. It should also be specified with these properties:

 pos => 0
 req => 1

Default value is optional.

=item * Other arguments are allowed and should have good defaults

=item * When function fails (i.e. it cannot transform the input value) it should return an error result

Examples:

 [404, "File not found"]
 [400, "Cannot take square root of a negative number"]
 [409, "File already exists"]

=item * The function should ideally not have side effects. It should just produce a transformed value

=item * The function should be named C<func> under the C<CellFunc::*> namespace

=back

A well-written CellFunc function should be readily usable as a CLI or as a
transformer in a CLI utility.

An example cell function:

 use strict;
 use warnings;

 package CellFunc::Math::sqrt;

 our %SPEC;
 $SPEC{'func'} = {
     v => 1.1,
     summary => 'Take square root of a number',
     args => {
         value => {schema => 'ufloat*', req=>1, pos=>0},
     },
 };
 sub func {
     my %args = @_;
     return [400, "Cannot take square root of a negative number"]
         unless $args{value} >= 0; # an additional check
     [200, "OK", $args{value} ** 0.5];
 }
 1;


=head1 NAMESPACE ORGANIZATION

B<CellFunc> is the specification.

Actual cell functions are put in C<CellFunc::*>, preferrably under suitable
subnamespaces named using "CamelCase" style except the last
element ("the name of the CellFunc") "lowercase_with_underscore" style.

C<CellFunc::gen_row::*> is a subnamespace for cell functions that generate a
"row" (a hashref of scalar values).


=head1 FAQ


=head1 SEE ALSO

=head2 Related specifications

L<Rinci> and L<Rinci::function>, the base specification upon which we built.

L<RowFunc>, like CellFunc but for functions that accept a "row" value.

L<Unixish>, which is a specification for function that consumes and produces
"streams" instead of a single value.

L<Data::Sah::Filter>, which lets you define cell function by returning a Perl
(or JavaScript, etc) expression to define the function. Used in code generation
like in schema generation. Part of the L<Data::Sah> framework.

=head2 Utility modules

L<App::cellfunc> lets you call specified a cell function and feed it data.

L<App::dux> for Unixish.

Bridges between us and C<Data::Sah::Filter>: L<CellFunc::Sah::from_sah_filter>
and L<Data::Sah::Filter::perl::CellFunc::from_cellfunc>.

Some applications let you specify cell functions or Data::Sah::Filter functions
by name to transform data, e.g. L<orgadb-sel> from L<App::orgadb>.

=cut
